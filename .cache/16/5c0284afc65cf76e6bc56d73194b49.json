{"id":"../node_modules/ip-num/IPNumber.js","dependencies":[{"name":"/home/user/Desktop/ip tracker/node_modules/ip-num/IPNumber.js.map","includedInParent":true,"mtime":1655295187963},{"name":"/home/user/Desktop/ip tracker/package.json","includedInParent":true,"mtime":1655298118967},{"name":"/home/user/Desktop/ip tracker/node_modules/ip-num/package.json","includedInParent":true,"mtime":1655295187959},{"name":"./Octet","loc":{"line":4,"column":24,"index":232},"parent":"/home/user/Desktop/ip tracker/node_modules/ip-num/IPNumber.js","resolved":"/home/user/Desktop/ip tracker/node_modules/ip-num/Octet.js"},{"name":"./Validator","loc":{"line":5,"column":28,"index":272},"parent":"/home/user/Desktop/ip tracker/node_modules/ip-num/IPNumber.js","resolved":"/home/user/Desktop/ip tracker/node_modules/ip-num/Validator.js"},{"name":"./BinaryUtils","loc":{"line":9,"column":30,"index":462},"parent":"/home/user/Desktop/ip tracker/node_modules/ip-num/IPNumber.js","resolved":"/home/user/Desktop/ip tracker/node_modules/ip-num/BinaryUtils.js"},{"name":"./Hexadecatet","loc":{"line":10,"column":30,"index":510},"parent":"/home/user/Desktop/ip tracker/node_modules/ip-num/IPNumber.js","resolved":"/home/user/Desktop/ip tracker/node_modules/ip-num/Hexadecatet.js"},{"name":"./HexadecimalUtils","loc":{"line":13,"column":35,"index":665},"parent":"/home/user/Desktop/ip tracker/node_modules/ip-num/IPNumber.js","resolved":"/home/user/Desktop/ip tracker/node_modules/ip-num/HexadecimalUtils.js"},{"name":"./IPv6Utils","loc":{"line":12,"column":28,"index":614},"parent":"/home/user/Desktop/ip tracker/node_modules/ip-num/IPNumber.js","resolved":"/home/user/Desktop/ip tracker/node_modules/ip-num/IPv6Utils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isIPv4 = exports.IPv6Mask = exports.IPv4Mask = exports.IPv6 = exports.Asn = exports.IPv4 = exports.AbstractIPNum = void 0;\nconst Octet_1 = require(\"./Octet\");\nconst Validator_1 = require(\"./Validator\");\nconst BinaryUtils_1 = require(\"./BinaryUtils\");\nconst BinaryUtils_2 = require(\"./BinaryUtils\");\nconst BinaryUtils_3 = require(\"./BinaryUtils\");\nconst BinaryUtils_4 = require(\"./BinaryUtils\");\nconst Hexadecatet_1 = require(\"./Hexadecatet\");\nconst HexadecimalUtils_1 = require(\"./HexadecimalUtils\");\nconst IPv6Utils_1 = require(\"./IPv6Utils\");\nconst HexadecimalUtils_2 = require(\"./HexadecimalUtils\");\n/**\n * Provides the implementation of functionality that are common\n * to {@link IPv4}, {@link IPv6}, {@link IPv4Mask} and {@link IPv6Mask}\n */\nclass AbstractIPNum {\n    /**\n     * Gets the numeric value of an IP number as {@link BigInt}\n     *\n     * @returns bigInt the numeric value of an IP number.\n     */\n    getValue() {\n        return this.value;\n    }\n    /**\n     * Gets the binary string representation of an IP number.\n     *\n     * @returns {string} the string binary representation.\n     */\n    toBinaryString() {\n        return BinaryUtils_3.leftPadWithZeroBit(this.value.toString(2), this.bitSize);\n    }\n    /**\n     * Checks if an IP number has a value greater than the present value\n     * @returns {boolean} true, if there is a value greater than the present value. Returns false otherwise.\n     */\n    hasNext() {\n        return this.value < this.maximumBitSize;\n    }\n    /**\n     * Checks if an IP number has a value lesser than the present value\n     * @returns {boolean} true, if there is a value lesser than the present value. Returns false otherwise.\n     */\n    hasPrevious() {\n        return this.value > 0n;\n    }\n    /**\n     * Checks if the given IP number, is equals to the current IP number\n     *\n     * @param {AbstractIPNum} anotherIPNum the other IP number to compare with\n     * @returns {boolean} true if the given IP number is equals\n     */\n    isEquals(anotherIPNum) {\n        return this.value === anotherIPNum.value;\n    }\n    /**\n     * Checks if the given IP number is lesser than this current IP number\n     *\n     * @param {AbstractIPNum} anotherIPNum the other IP number to compare with\n     * @returns {boolean} true if the given IP number is less than this current one. False otherwise.\n     */\n    isLessThan(anotherIPNum) {\n        return this.value < anotherIPNum.value;\n    }\n    /**\n     * Checks if the given IP number is greater than this current IP number\n     *\n     * @param {AbstractIPNum} anotherIPNum the other IP number to compare with\n     * @returns {boolean} true if the given IP number is greater than this current one. False otherwise.\n     */\n    isGreaterThan(anotherIPNum) {\n        return this.value > anotherIPNum.value;\n    }\n    /**\n     * Checks if the given IP number is less than or equals to this current IP number\n     *\n     * @param {AbstractIPNum} anotherIPNum the other IP number to compare with\n     * @returns {boolean} true if the given IP number is less than or equals to this current one. False otherwise.\n     */\n    isLessThanOrEquals(anotherIPNum) {\n        return this.value <= anotherIPNum.value;\n    }\n    /**\n     * Checks if the given IP number is greater than or equals to this current IP number\n     *\n     * @param {AbstractIPNum} anotherIPNum the other IP number to compare with\n     * @returns {boolean} {boolean} true if the given IP number is greater than or equals to this current one. False\n     * otherwise.\n     */\n    isGreaterThanOrEquals(anotherIPNum) {\n        return this.value >= anotherIPNum.value;\n    }\n}\nexports.AbstractIPNum = AbstractIPNum;\n/**\n * Represents an IPv4 number. A 32 bit number that is used to uniquely identify a device that is part of a computer\n * network that uses the internet protocol for communication.\n *\n * @see https://en.wikipedia.org/wiki/IPv4\n * @see https://www.rfc-editor.org/info/rfc791\n */\nclass IPv4 extends AbstractIPNum {\n    /**\n     * Constructor for an IPv4 number.\n     *\n     * @param {string | bigint} ipValue value to construct an IPv4 from. The given value can either be\n     * numeric or string. If a string is given then it needs to be in dot-decimal notation\n     */\n    constructor(ipValue) {\n        super();\n        /**\n         * The number of bits needed to represents the value of the IPv4 number\n         */\n        this.bitSize = 32;\n        /**\n         * The maximum bit size (i.e. binary value) of the IPv4 number in BigInt\n         */\n        this.maximumBitSize = Validator_1.Validator.THIRTY_TWO_BIT_SIZE;\n        /**\n         * The type of IP number. Value is one of the values of the {@link IPNumType} enum\n         * @type {IPNumType} the type of IP number\n         */\n        this.type = \"IPv4\" /* IPv4 */;\n        /**\n         * An array of {@link Octet}'s\n         *\n         * @type {Array} the octets that makes up the IPv4 number\n         */\n        this.octets = [];\n        /**\n         * The string character used to separate the individual octets when the IPv4 is rendered as strings\n         *\n         * @type {string} The string character used to separate the individual octets when rendered as strings\n         */\n        this.separator = \".\";\n        if (typeof ipValue === \"string\") {\n            let [value, octets] = this.constructFromDecimalDottedString(ipValue);\n            this.value = value;\n            this.octets = octets;\n        }\n        else {\n            let [value, octets] = this.constructFromBigIntValue(ipValue);\n            this.value = value;\n            this.octets = octets;\n        }\n    }\n    /**\n     * A convenience method for creating an {@link IPv4} by providing the decimal value of the IP number in BigInt\n     *\n     * @param {bigint} bigIntValue the decimal value of the IP number in BigInt\n     * @returns {IPv4} the IPv4 instance\n     */\n    static fromNumber(bigIntValue) {\n        return new IPv4(bigIntValue);\n    }\n    /**\n     * A convenience method for creating an {@link IPv4} by providing the IP number in dot-decimal notation. E.g\n     * \"10.1.1.10\"\n     *\n     * {@see https://en.wikipedia.org/wiki/Dot-decimal_notation} for more information on dot-decimal notation.\n     *\n     * @param {string} ipString the IP number in dot-decimal notation\n     * @returns {IPv4} the IPv4 instance\n     */\n    static fromDecimalDottedString(ipString) {\n        return new IPv4(ipString);\n    }\n    /**\n     * Alias for IPv4.fromDecimalDottedString.\n     *\n     * @param {string} ipString the IP number in dot-decimal notation\n     * @returns {IPv4} the IPv4 instance\n     */\n    static fromString(ipString) {\n        return IPv4.fromDecimalDottedString(ipString);\n    }\n    /**\n     * A convenience method for creating an {@link IPv4} from binary string\n     *\n     * @param {string} ipBinaryString the binary string representing the IPv4 number to be created\n     * @returns {IPv4} the IPv4 instance\n     */\n    static fromBinaryString(ipBinaryString) {\n        let validationResult = Validator_1.Validator.isValidBinaryString(ipBinaryString);\n        if (validationResult[0]) {\n            return new IPv4(BinaryUtils_2.parseBinaryStringToBigInt(ipBinaryString));\n        }\n        else {\n            throw Error(validationResult[1].join(','));\n        }\n    }\n    /**\n     * A string representation of the IPv4 number. The string representation is in dot-decimal notation\n     *\n     * @returns {string} The string representation in dot-decimal notation\n     */\n    toString() {\n        return this.octets.map((value) => { return value.toString(); }).join(this.separator);\n    }\n    /**\n     * Gets the individual {@link Octet} that makes up the IPv4 number\n     *\n     * @returns {Array<Octet>} The individual {@link Octet} that makes up the IPv4 number\n     */\n    getOctets() {\n        return this.octets;\n    }\n    /**\n     * Returns the next IPv4 number\n     *\n     * @returns {IPv4} the next IPv4 number\n     */\n    nextIPNumber() {\n        return IPv4.fromNumber(this.getValue() + 1n);\n    }\n    /**\n     * Returns the previous IPv4 number\n     *\n     * @returns {IPv4} the previous IPv4 number\n     */\n    previousIPNumber() {\n        return IPv4.fromNumber(this.getValue() - 1n);\n    }\n    /**\n     * Returns this IPv4 number as a IPv4-Mapped IPv6 Address\n     *\n     * The IPv4-Mapped IPv6 Address allows an IPv4 number to be embedded within an IPv6 number\n     *\n     * {@see https://tools.ietf.org/html/rfc4291#section-2.5.5} for more information on the IPv4-Mapped IPv6 Address\n     *\n     * @returns {IPv6} an IPv6 number with the IPv4 embedded within it\n     */\n    toIPv4MappedIPv6() {\n        let binary = '1'.repeat(16) + this.toBinaryString();\n        return IPv6.fromBinaryString(binary);\n    }\n    constructFromDecimalDottedString(ipString) {\n        let octets;\n        let value;\n        let [isValid, message] = Validator_1.Validator.isValidIPv4String(ipString);\n        if (!isValid) {\n            throw new Error(message.filter(msg => { return msg !== ''; }).toString());\n        }\n        let stringOctets = ipString.split(\".\");\n        octets = stringOctets.map((rawOctet) => {\n            return Octet_1.Octet.fromString(rawOctet);\n        });\n        value = BigInt(`0b${BinaryUtils_1.dottedDecimalNotationToBinaryString(ipString)}`);\n        return [value, octets];\n    }\n    constructFromBigIntValue(ipv4Number) {\n        let [isValid, message] = Validator_1.Validator.isValidIPv4Number(ipv4Number);\n        if (!isValid) {\n            throw new Error(message.filter(msg => { return msg !== ''; }).toString());\n        }\n        let binaryString = BinaryUtils_4.numberToBinaryString(ipv4Number);\n        ipv4Number = typeof ipv4Number === \"bigint\" ? ipv4Number : BigInt(ipv4Number);\n        return [ipv4Number, this.binaryStringToDecimalOctets(binaryString)];\n    }\n    binaryStringToDecimalOctets(ipv4BinaryString) {\n        if (ipv4BinaryString.length < 32) {\n            ipv4BinaryString = BinaryUtils_3.leftPadWithZeroBit(ipv4BinaryString, 32);\n        }\n        let octets = ipv4BinaryString.match(/.{1,8}/g);\n        return octets.map((octet) => {\n            return Octet_1.Octet.fromString(BinaryUtils_2.parseBinaryStringToBigInt(octet).toString());\n        });\n    }\n}\nexports.IPv4 = IPv4;\n/**\n * Represents an Autonomous System Number. Which is a number that is used to identify\n * a group of IP addresses with a common, clearly defined routing policy.\n *\n * @see https://en.wikipedia.org/wiki/Autonomous_system_(Internet)\n * @see https://tools.ietf.org/html/rfc5396\n */\nclass Asn extends AbstractIPNum {\n    /**\n     * Constructor for an instance of {@link ASN}\n     *\n     * @param {string | number} rawValue value to construct an ASN from. The given value can either be numeric or\n     * string. If in string then it can be in asplain, asdot or asdot+ string representation format\n     */\n    constructor(rawValue) {\n        super();\n        /**\n         * The number of bits needed to represents the value of the ASN number\n         */\n        this.bitSize = 32;\n        /**\n         * The maximum bit size (i.e. binary value) of the ASN number in BigInt\n         */\n        this.maximumBitSize = Validator_1.Validator.THIRTY_TWO_BIT_SIZE;\n        this.type = \"ASN\" /* ASN */;\n        if (typeof rawValue === 'string') {\n            if (Asn.startWithASPrefix(rawValue)) {\n                this.value = BigInt(parseInt(rawValue.substring(2)));\n            }\n            else if (rawValue.indexOf(\".\") != -1) {\n                this.value = BigInt(this.parseFromDotNotation(rawValue));\n            }\n            else {\n                this.value = BigInt(parseInt(rawValue));\n            }\n        }\n        else {\n            let valueAsBigInt = BigInt(rawValue);\n            let [isValid, message] = Validator_1.Validator.isValidAsnNumber(valueAsBigInt);\n            if (!isValid) {\n                throw Error(message.filter(msg => { return msg !== ''; }).toString());\n            }\n            this.value = valueAsBigInt;\n        }\n    }\n    /**\n     * A convenience method for creating an instance of {@link Asn} from a string\n     *\n     * The given string can be in asplain, asdot or asdot+ representation format.\n     * {@see https://tools.ietf.org/html/rfc5396} for more information on\n     * the different ASN string representation\n     *\n     * @param {string} rawValue the asn string. In either asplain, asdot or asdot+ format\n     * @returns {Asn} the constructed ASN instance\n     */\n    static fromString(rawValue) {\n        return new Asn(rawValue);\n    }\n    ;\n    /**\n     * A convenience method for creating an instance of {@link Asn} from a numeric value\n     *\n     * @param {number} rawValue the asn numeric value\n     * @returns {Asn} the constructed ASN instance\n     */\n    static fromNumber(rawValue) {\n        return new Asn(rawValue);\n    }\n    ;\n    /**\n     * A convenience method for creating an instance of {@link Asn} from a binary string\n     *\n     * @param {string} binaryString to create an ASN instance from\n     * @returns {Asn} the constructed ASN instance\n     */\n    static fromBinaryString(binaryString) {\n        let validationResult = Validator_1.Validator.isValidBinaryString(binaryString);\n        if (validationResult[0]) {\n            return new Asn(parseInt(binaryString, 2));\n        }\n        else {\n            throw Error(validationResult[1].join(','));\n        }\n    }\n    /**\n     * A string representation where the asn value is prefixed by \"ASN\". For example \"AS65526\"\n     *\n     * @returns {string} A string representation where the asn value is prefixed by \"ASN\"\n     */\n    toString() {\n        let stringValue = this.value.toString();\n        return `${Asn.AS_PREFIX}${stringValue}`;\n    }\n    /**\n     * A string representation where the ASN numeric value of is represented as a string. For example \"65526\"\n     *\n     * @returns {string} A string representation where the ASN numeric value of is represented as a string\n     */\n    toASPlain() {\n        return this.value.toString();\n    }\n    /**\n     * A string representation where the ASN value is represented using the asplain notation if the ASN value is\n     * less than 65536 and uses asdot+ notation when the value is greater than 65536.\n     *\n     * For example 65526 will be represented as \"65526\" while 65546 will be represented as \"1.10\"\n     *\n     *\n     * @returns {string} A string representation of the ASN in either asplain or asdot+ notation depending on\n     * whether the numeric value of the ASN number is greater than 65526 or not.\n     */\n    toASDot() {\n        if (this.value.valueOf() >= 65536n) {\n            return this.toASDotPlus();\n        }\n        return this.toASPlain();\n    }\n    /**\n     * A string representation where the ASN value is represented using the asdot+ notation\n     *\n     * @returns {string} A string representation where the ASN value is represented using the asdot+ notation\n     *\n     */\n    toASDotPlus() {\n        let high = this.value.valueOf() / 65535n;\n        let low = (this.value.valueOf() % 65535n) - high;\n        return `${high}.${low}`;\n    }\n    /**\n     * Converts the ASN value to binary numbers represented with strings\n     *\n     * @returns {string} a binary string representation of the value of the ASN number\n     */\n    toBinaryString() {\n        return BinaryUtils_4.numberToBinaryString(this.value);\n    }\n    /**\n     * Checks if the ASN value is 16bit\n     *\n     * @returns {boolean} true if the ASN is a 16bit value. False otherwise.\n     */\n    is16Bit() {\n        let [valid16BitAsnNumber,] = Validator_1.Validator.isValid16BitAsnNumber(this.value);\n        return valid16BitAsnNumber;\n    }\n    /**\n     * Checks if the ASN value is 32bit\n     *\n     * @returns {boolean} true if the ASN is a 32bit value. False otherwise.\n     */\n    is32Bit() {\n        return !this.is16Bit();\n    }\n    /**\n     * Returns the next ASN number\n     *\n     * @returns {AbstractIPNum} the next ASN number\n     */\n    nextIPNumber() {\n        return new Asn(this.value.valueOf() + 1n);\n    }\n    /**\n     * Returns the previous ASN number\n     *\n     * @returns {AbstractIPNum} the previous ASN number\n     */\n    previousIPNumber() {\n        return new Asn(this.value.valueOf() - 1n);\n    }\n    static startWithASPrefix(word) {\n        return word.indexOf(Asn.AS_PREFIX) === 0;\n    }\n    parseFromDotNotation(rawValue) {\n        let values = rawValue.split(\".\");\n        let high = parseInt(values[0]);\n        let low = parseInt(values[1]);\n        return (high * 65535) + (low + high);\n    }\n}\nexports.Asn = Asn;\nAsn.AS_PREFIX = \"AS\";\n/**\n * Represents an IPv6 number. A 128 bit number that is used to uniquely identify a device that is part of a computer\n * network that uses the internet protocol for communication.\n *\n * @see https://en.wikipedia.org/wiki/IPv6\n * @see https://www.rfc-editor.org/info/rfc8200\n */\nclass IPv6 extends AbstractIPNum {\n    /**\n     * Constructor for an IPv6 number.\n     *\n     * @param {string | bigint} ipValue value to construct an IPv6 from. The given value can either be\n     * numeric or string. If a string is given then it needs to be in hexadecatet string notation\n     */\n    constructor(ipValue) {\n        super();\n        /**\n         * The number of bits needed to represents the value of the IPv6 number\n         */\n        this.bitSize = 128;\n        /**\n         * The maximum bit size (i.e. binary value) of the IPv6 number in BigInt\n         */\n        this.maximumBitSize = Validator_1.Validator.ONE_HUNDRED_AND_TWENTY_EIGHT_BIT_SIZE;\n        /**\n         * The type of IP number. Value is one of the values of the {@link IPNumType} enum\n         * @type {IPNumType} the type of IP number\n         */\n        this.type = \"IPv6\" /* IPv6 */;\n        /**\n         * An array of {@link Hexadecatet}'s\n         *\n         * @type {Array} the hexadecatet that makes up the IPv6 number\n         */\n        this.hexadecatet = [];\n        /**\n         * The string character used to separate the individual hexadecatet when the IPv6 is rendered as strings\n         *\n         * @type {string} The string character used to separate the individual hexadecatet when rendered as strings\n         */\n        this.separator = \":\";\n        if (typeof ipValue === \"string\") {\n            let expandedIPv6 = IPv6Utils_1.expandIPv6Number(ipValue);\n            let [value, hexadecatet] = this.constructFromHexadecimalDottedString(expandedIPv6);\n            this.value = value;\n            this.hexadecatet = hexadecatet;\n        }\n        else {\n            let [value, hexadecatet] = this.constructFromBigIntValue(ipValue);\n            this.value = value;\n            this.hexadecatet = hexadecatet;\n        }\n    }\n    /**\n     * A convenience method for creating an {@link IPv6} by providing the decimal value of the IP number in BigInt\n     *\n     * @param {bigint} bigIntValue the decimal value of the IP number in BigInt\n     * @returns {IPv6} the IPv6 instance\n     */\n    static fromBigInt(bigIntValue) {\n        return new IPv6(bigIntValue);\n    }\n    /**\n     * A convenience method for creating an {@link IPv6} by providing the IP number in hexadecatet notation. E.g\n     * \"2001:800:0:0:0:0:0:2002\"\n     *\n     * {@see https://en.wikipedia.org/wiki/IPv6_address#Representation} for more information on hexadecatet notation.\n     *\n     * @param {string} ipString the IP number in hexadecatet\n     * @returns {IPv6} the IPv6 instance\n     */\n    static fromHexadecatet(ipString) {\n        return new IPv6(ipString);\n    }\n    /**\n     * Alias for IPv6.fromHexadecimalString\n     *\n     * @param {string} ipString the IP number in hexadecatet\n     * @returns {IPv6} the IPv6 instance\n     */\n    static fromString(ipString) {\n        return IPv6.fromHexadecatet(ipString);\n    }\n    /**\n     * A convenience method for creating an {@link IPv6} from binary string\n     *\n     * @param {string} ipBinaryString the binary string representing the IPv6 number to be created\n     * @returns {IPv6} the IPv6 instance\n     */\n    static fromBinaryString(ipBinaryString) {\n        let validationResult = Validator_1.Validator.isValidBinaryString(ipBinaryString);\n        if (validationResult[0]) {\n            let paddedBinaryString = BinaryUtils_3.leftPadWithZeroBit(ipBinaryString, 128);\n            return new IPv6(BinaryUtils_2.parseBinaryStringToBigInt(paddedBinaryString));\n        }\n        else {\n            throw Error(validationResult[1].join(','));\n        }\n    }\n    /**\n     * A convenience method for creating an IPv4-Compatible {@link IPv6} Address from an instance of {@link IPv4}\n     *\n     * @param {IPv4} ipv4 to create an IPv4-Compatible {@link IPv6} Address\n     * @returns {IPv6} the IPv4-Compatible {@link IPv6} Address\n     */\n    static fromIPv4(ipv4) {\n        return ipv4.toIPv4MappedIPv6();\n    }\n    /**\n     * A convenience method for creating an IPv4-Compatible {@link IPv6} Address from a IPv4 represented in\n     * dot-decimal notation i.e. 127.0.0.1\n     *\n     * @param {IPv4} ip4DotDecimalString string represented in a dot decimal string\n     * @returns {IPv6} the IPv4-Compatible {@link IPv6} Address\n     */\n    static fromIPv4DotDecimalString(ip4DotDecimalString) {\n        return new IPv4(ip4DotDecimalString).toIPv4MappedIPv6();\n    }\n    /**\n     * A string representation of the IPv6 number.\n     *\n     * @returns {string} The string representation of IPv6\n     */\n    toString() {\n        let ipv6String = this.hexadecatet.map((value) => { return value.toString(); }).join(\":\");\n        if (this.hexadecatet.length < 8) {\n            return \"::\" + ipv6String;\n        }\n        else {\n            return ipv6String;\n        }\n    }\n    /**\n     * Gets the individual {@link Hexadecatet} that makes up the IPv6 number\n     *\n     * @returns {Array<Hexadecatet>} The individual {@link Hexadecatet} that makes up the IPv6 number\n     */\n    //TODO maybe rename to something like getSegments? so it can be same with getOctet\n    getHexadecatet() {\n        return this.hexadecatet;\n    }\n    /**\n     * Returns the next IPv6 number\n     *\n     * @returns {IPv6} the next IPv6 number\n     */\n    nextIPNumber() {\n        return IPv6.fromBigInt(this.getValue() + 1n);\n    }\n    /**\n     * Returns the previous IPv6 number\n     *\n     * @returns {IPv6} the previous IPv6 number\n     */\n    previousIPNumber() {\n        return IPv6.fromBigInt(this.getValue() - 1n);\n    }\n    constructFromBigIntValue(ipv6Number) {\n        let [isValid, message] = Validator_1.Validator.isValidIPv6Number(ipv6Number);\n        if (!isValid) {\n            throw new Error(message.filter(msg => { return msg !== ''; }).toString());\n        }\n        let binaryString = BinaryUtils_4.numberToBinaryString(ipv6Number);\n        return [ipv6Number, this.binaryStringToHexadecatets(binaryString)];\n    }\n    constructFromHexadecimalDottedString(expandedIPv6) {\n        let [isValid, message] = Validator_1.Validator.isValidIPv6String(expandedIPv6);\n        if (!isValid) {\n            throw new Error(message.filter(msg => { return msg !== ''; }).toString());\n        }\n        let stringHexadecimals = expandedIPv6.split(\":\");\n        let hexadecatet = stringHexadecimals.map((stringHexadecatet) => {\n            return Hexadecatet_1.Hexadecatet.fromString(stringHexadecatet);\n        });\n        let value = BigInt(`0b${HexadecimalUtils_2.hexadectetNotationToBinaryString(expandedIPv6)}`);\n        return [value, hexadecatet];\n    }\n    binaryStringToHexadecatets(binaryString) {\n        let hexadecimalString = HexadecimalUtils_1.binaryStringToHexadecimalString(binaryString);\n        while (hexadecimalString.length % 4 != 0) {\n            hexadecimalString = '0' + hexadecimalString;\n        }\n        let hexadecimalStrings = hexadecimalString.match(/.{1,4}/g);\n        return hexadecimalStrings.map((stringHexadecatet) => {\n            return Hexadecatet_1.Hexadecatet.fromString(stringHexadecatet);\n        });\n    }\n}\nexports.IPv6 = IPv6;\n/**\n * The IPv4Mask can be seen as a specialized IPv4 number where, in a 32 bit number, starting from the left, you\n * have continuous bits turned on (with 1 value) followed by bits turned off (with 0 value). In networking, it is used\n * to demarcate which bits are used to identify a network, and the ones that are used to identify hosts on the network\n */\nclass IPv4Mask extends IPv4 {\n    /**\n     * Constructor for creating an instance of IPv4Mask.\n     * The passed strings need to be a valid IPv4 mask number in dot-decimal notation.\n     *\n     * @param {string} ipString The passed string in dot-decimal notation\n     */\n    constructor(ipString) {\n        super(ipString);\n        /**\n         * An array of {@link Octet}'s\n         *\n         * @type {Array} the octets that makes up the IPv4Mask\n         */\n        this.octets = [];\n        let isValid;\n        let message;\n        [isValid, message] = Validator_1.Validator.isValidIPv4Mask(ipString);\n        if (!isValid) {\n            throw new Error(message.filter(msg => { return msg !== ''; }).toString());\n        }\n        let stringOctets = ipString.split(\".\");\n        this.octets = stringOctets.map((rawOctet) => {\n            return Octet_1.Octet.fromString(rawOctet);\n        });\n        let binaryString = BinaryUtils_1.dottedDecimalNotationToBinaryString(ipString);\n        this.prefix = (binaryString.match(/1/g) || []).length;\n        this.value = BigInt(`0b${binaryString}`);\n    }\n    /**\n     * A convenience method for creating an instance of IPv4Mask. The passed strings need to be a valid IPv4\n     * number in dot-decimal notation.\n     *\n     * @param {string} rawValue The passed string in dot-decimal notation\n     * @returns {IPv4Mask} the instance of IPv4Mask\n     */\n    static fromDecimalDottedString(rawValue) {\n        return new IPv4Mask(rawValue);\n    }\n    ;\n}\nexports.IPv4Mask = IPv4Mask;\n/**\n * The IPv6Mask can be seen as a specialized IPv4 number where, in a 128 bit number, starting from the left,\n * you have continuous bits turned on (with 1 value) followed by bits turned off (with 0 value). In networking, it\n * is used to to demarcate which bits are used to identify a network, and the ones that are used to identify hosts\n * on the network\n */\nclass IPv6Mask extends IPv6 {\n    /**\n     * Constructor for creating an instance of IPv6Mask.\n     * The passed strings need to be a valid IPv6 mask number in dot-decimal notation\n     *\n     * @param {string} ipString The passed IPv6 string\n     */\n    constructor(ipString) {\n        super(ipString);\n        /**\n         * An array of {@link Hexadecatet}'s\n         *\n         * @type {Array} the hexadecatet that makes up the IPv6 number\n         */\n        this.hexadecatet = [];\n        let isValid;\n        let message;\n        [isValid, message] = Validator_1.Validator.isValidIPv6Mask(ipString);\n        if (!isValid) {\n            throw new Error(message.filter(msg => { return msg !== ''; }).toString());\n        }\n        let stringHexadecimals = ipString.split(\":\");\n        this.hexadecatet = stringHexadecimals.map((stringHexadecatet) => {\n            return Hexadecatet_1.Hexadecatet.fromString(stringHexadecatet);\n        });\n        let binaryString = HexadecimalUtils_2.hexadectetNotationToBinaryString(ipString);\n        this.prefix = (binaryString.match(/1/g) || []).length;\n        this.value = BigInt(`0b${binaryString}`);\n        this.value = BigInt(`0b${HexadecimalUtils_2.hexadectetNotationToBinaryString(ipString)}`);\n    }\n    /**\n     * A convenience method for creating an instance of IPv6Mask.\n     * The passed strings need to be a valid IPv4 mask number in dot-decimal notation.\n     *\n     * @param {string} rawValue The passed string in textual notation\n     * @returns {IPv6Mask} the instance of IPv6Mask\n     */\n    static fromHexadecatet(rawValue) {\n        return new IPv6Mask(rawValue);\n    }\n    ;\n}\nexports.IPv6Mask = IPv6Mask;\n/**\n * Check is the given IP number is an {@link IPv4} or not\n * @param ip the IP number to check if it is IPv4.\n */\nfunction isIPv4(ip) {\n    return ip.bitSize === 32;\n}\nexports.isIPv4 = isIPv4;\n"},"sourceMaps":{"js":{"version":3,"file":"IPNumber.js","sourceRoot":"","sources":["../../src/IPNumber.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"5b48dff5b5d89560cf787834ce624b42","cacheData":{"env":{}}}