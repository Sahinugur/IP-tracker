{"id":"../node_modules/ip-num/Hexadecatet.js","dependencies":[{"name":"/home/user/Desktop/ip tracker/node_modules/ip-num/Hexadecatet.js.map","includedInParent":true,"mtime":1655295187963},{"name":"/home/user/Desktop/ip tracker/package.json","includedInParent":true,"mtime":1655298118967},{"name":"/home/user/Desktop/ip tracker/node_modules/ip-num/package.json","includedInParent":true,"mtime":1655295187959},{"name":"./Validator","loc":{"line":4,"column":28,"index":135},"parent":"/home/user/Desktop/ip tracker/node_modules/ip-num/Hexadecatet.js","resolved":"/home/user/Desktop/ip tracker/node_modules/ip-num/Validator.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Hexadecatet = void 0;\nconst Validator_1 = require(\"./Validator\");\n/**\n * A representation of a 4-digit hexadecimal number.\n *\n * It consists of four (base 16) number. ie FFFF\n *\n * It is used to represents the components of an IPv6 address\n */\nclass Hexadecatet {\n    /**\n     * Constructor for creating an instance of {@link Hexadecatet}\n     *\n     * @param {string | number} givenValue a string or numeric value. If given value is a string then it should be a\n     * four (base 16) number representation of a 16bit value. If it is a number, then it should be a decimal number\n     * representation of a 16 bit value\n     */\n    constructor(givenValue) {\n        let hexadecatetValue;\n        if (typeof givenValue === 'string') {\n            hexadecatetValue = parseInt(givenValue, 16);\n        }\n        else {\n            hexadecatetValue = parseInt(String(givenValue), 16);\n        }\n        let [isValid, message] = Validator_1.Validator.isValidIPv6Hexadecatet(BigInt(hexadecatetValue));\n        if (!isValid) {\n            throw Error(message.filter(msg => { return msg !== ''; }).toString());\n        }\n        this.value = hexadecatetValue;\n    }\n    /**\n     * A convenience method for constructing an instance of {@link Hexadecatet} from a four (base 16) number\n     * representation of a 16bit value.\n     *\n     * @param {string} rawValue the four (base 16) number\n     * @returns {Hexadecatet} an instance of {@link Hexadecatet}\n     */\n    static fromString(rawValue) {\n        return new Hexadecatet(rawValue);\n    }\n    ;\n    /**\n     * A convenience method for constructing an instance of {@link Hexadecatet} from a decimal number representation\n     * of a 16 bit value\n     *\n     * @param {number} rawValue decimal number representation of a 16 bit value\n     * @returns {Hexadecatet} an instance of {@link Hexadecatet}\n     */\n    static fromNumber(rawValue) {\n        return new Hexadecatet(rawValue);\n    }\n    ;\n    /**\n     * Returns the numeric value in base 10 (ie decimal)\n     *\n     * @returns {number} the numeric value in base 10 (ie decimal)\n     */\n    getValue() {\n        return this.value;\n    }\n    /**\n     * Returns the string representation of the base 16 representation of the value\n     * @returns {string} the string representation of the base 16 representation of the value\n     */\n    // TODO pad with a zero if digit is less than 4\n    toString() {\n        return this.value.toString(16);\n    }\n}\nexports.Hexadecatet = Hexadecatet;\n"},"sourceMaps":{"js":{"version":3,"file":"Hexadecatet.js","sourceRoot":"","sources":["../../src/Hexadecatet.ts"],"names":[],"mappings":";;;AAAA,2CAAsC;AAEtC;;;;;;GAMG;AACH,MAAa,WAAW;IAyBpB;;;;;;OAMG;IACH,YAAY,UAA2B;QACnC,IAAI,gBAAwB,CAAC;QAC7B,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YAChC,gBAAgB,GAAG,QAAQ,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;SAC/C;aAAM;YACH,gBAAgB,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;SACvD;QAED,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,qBAAS,CAAC,sBAAsB,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAEpF,IAAI,CAAC,OAAO,EAAE;YACV,MAAM,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,GAAE,OAAO,GAAG,KAAK,EAAE,CAAC,CAAA,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;SACvE;QACD,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC;IAClC,CAAC;IA3CD;;;;;;OAMG;IACH,MAAM,CAAC,UAAU,CAAC,QAAgB;QAC9B,OAAO,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAAA,CAAC;IAEF;;;;;;OAMG;IACH,MAAM,CAAC,UAAU,CAAC,QAAgB;QAC9B,OAAO,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAAA,CAAC;IAyBF;;;;OAIG;IACI,QAAQ;QACX,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED;;;OAGG;IACH,+CAA+C;IACxC,QAAQ;QACX,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;CACJ;AAjED,kCAiEC","sourcesContent":[null]}},"error":null,"hash":"4ee5eff331a4f8d63fb9012c56054141","cacheData":{"env":{}}}