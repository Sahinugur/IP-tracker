{"id":"../node_modules/ip-num/HexadecimalUtils.js","dependencies":[{"name":"/home/user/Desktop/ip tracker/node_modules/ip-num/HexadecimalUtils.js.map","includedInParent":true,"mtime":1655295187963},{"name":"/home/user/Desktop/ip tracker/package.json","includedInParent":true,"mtime":1655298118967},{"name":"/home/user/Desktop/ip tracker/node_modules/ip-num/package.json","includedInParent":true,"mtime":1655295187959},{"name":"./IPv6Utils","loc":{"line":4,"column":28,"index":372},"parent":"/home/user/Desktop/ip tracker/node_modules/ip-num/HexadecimalUtils.js","resolved":"/home/user/Desktop/ip tracker/node_modules/ip-num/IPv6Utils.js"},{"name":"./BinaryUtils","loc":{"line":5,"column":30,"index":418},"parent":"/home/user/Desktop/ip tracker/node_modules/ip-num/HexadecimalUtils.js","resolved":"/home/user/Desktop/ip tracker/node_modules/ip-num/BinaryUtils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hexadectetNotationToBinaryString = exports.binaryStringToHexadecimalString = exports.colonHexadecimalNotationToBinaryString = exports.hexadecimalStringToHexadecatetString = exports.hexadecimalStringToBinaryString = exports.bigIntToHexadecimalString = void 0;\nconst IPv6Utils_1 = require(\"./IPv6Utils\");\nconst BinaryUtils_1 = require(\"./BinaryUtils\");\n/**\n * Converts a given bigint number to a hexadecimal string\n * @param num the bigint number\n * @returns {string} the hexadeciaml string\n */\nexports.bigIntToHexadecimalString = (num) => {\n    return num.toString(16);\n};\n/**\n * Converts a number in hexadecimal (base 16) to binary string\n * @param {string} hexadecimalString the number in base 16\n * @returns {string} the number converted to base 2\n */\nexports.hexadecimalStringToBinaryString = (hexadecimalString) => {\n    let inDecimal = BigInt(`0x${hexadecimalString}`);\n    return inDecimal.toString(2);\n};\n/**\n * Converts a number in hexadecimal (base 16) to binary hexadecatet string.\n * This means the bits in the output cannot be more than 16\n *\n * @param hexadecimalString {string} the number converted to binary hexadecatet string\n */\nexports.hexadecimalStringToHexadecatetString = (hexadecimalString) => {\n    let binaryString = exports.hexadecimalStringToBinaryString(hexadecimalString);\n    let length = binaryString.length;\n    if (length > 16) {\n        throw new Error(\"Given decimal in binary contains digits greater than an Hexadecatet\");\n    }\n    return BinaryUtils_1.leftPadWithZeroBit(binaryString, 16);\n};\n/**\n * Given an IPv6 number in hexadecimal notated string, e.g 2001:0db8:0000:0000:0000:0000:0000:0000 converts it to\n * binary string\n *\n * @param hexadecimalString IPv6 string\n * @returns {string} the binary value of the given ipv6 number in string\n */\nexports.colonHexadecimalNotationToBinaryString = (hexadecimalString) => {\n    let expandedIPv6 = IPv6Utils_1.expandIPv6Number(hexadecimalString);\n    let stringHexadecimal = expandedIPv6.split(\":\");\n    return stringHexadecimal.reduce((binaryAsString, hexidecimal) => {\n        return binaryAsString.concat(exports.hexadecimalStringToHexadecatetString(hexidecimal));\n    }, '');\n};\n/**\n * Converts number in binary string to hexadecimal string\n * @param {string} num in binary string\n * @returns {string} num in hexadecimal string\n */\nexports.binaryStringToHexadecimalString = (num) => {\n    // first convert to binary string to decimal (big Integer)\n    let inDecimal = BigInt(`0b${num}`);\n    return inDecimal.toString(16);\n};\n/**\n * Converts a given IPv6 number expressed in the hexadecimal string notation into a 16 bit binary number in string\n * @param {string} hexadectetString the IPv6 number\n * @returns {string} the IPv6 number converted to binary string\n */\nexports.hexadectetNotationToBinaryString = (hexadectetString) => {\n    let expand = IPv6Utils_1.expandIPv6Number(hexadectetString);\n    let hexadecimals = expand.split(\":\");\n    return hexadecimals.reduce((hexadecimalAsString, hexavalue) => {\n        return hexadecimalAsString.concat(BinaryUtils_1.leftPadWithZeroBit(exports.hexadecimalStringToBinaryString(hexavalue), 16));\n    }, '');\n};\n"},"sourceMaps":{"js":{"version":3,"file":"HexadecimalUtils.js","sourceRoot":"","sources":["../../src/HexadecimalUtils.ts"],"names":[],"mappings":";;;AAAA,2CAA6C;AAC7C,+CAAiD;AAEjD;;;;GAIG;AACQ,QAAA,yBAAyB,GAAG,CAAC,GAAW,EAAU,EAAE;IAC3D,OAAO,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC5B,CAAC,CAAC;AAEF;;;;GAIG;AACQ,QAAA,+BAA+B,GAAG,CAAC,iBAAyB,EAAW,EAAE;IAChF,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,iBAAiB,EAAE,CAAC,CAAC;IACjD,OAAO,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC;AAEF;;;;;GAKG;AACQ,QAAA,oCAAoC,GAAG,CAAC,iBAAyB,EAAU,EAAE;IACtF,IAAI,YAAY,GAAG,uCAA+B,CAAC,iBAAiB,CAAC,CAAC;IAEtE,IAAI,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;IACjC,IAAI,MAAM,GAAG,EAAE,EAAE;QACf,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAA;KACvF;IACD,OAAO,gCAAkB,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;AAC9C,CAAC,CAAC;AAEF;;;;;;GAMG;AACQ,QAAA,sCAAsC,GAAG,CAAC,iBAAyB,EAAU,EAAE;IACxF,IAAI,YAAY,GAAG,4BAAgB,CAAC,iBAAiB,CAAC,CAAC;IACvD,IAAI,iBAAiB,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEhD,OAAO,iBAAiB,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,WAAW,EAAE,EAAE;QAC9D,OAAO,cAAc,CAAC,MAAM,CAAC,4CAAoC,CAAC,WAAW,CAAC,CAAC,CAAA;IACjF,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC;AAGF;;;;GAIG;AACQ,QAAA,+BAA+B,GAAG,CAAC,GAAW,EAAU,EAAE;IACjE,0DAA0D;IAC1D,IAAI,SAAS,GAAG,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC;IACnC,OAAO,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAClC,CAAC,CAAC;AAEF;;;;GAIG;AACQ,QAAA,gCAAgC,GAAG,CAAC,gBAAwB,EAAU,EAAE;IACjF,IAAI,MAAM,GAAG,4BAAgB,CAAC,gBAAgB,CAAC,CAAC;IAChD,IAAI,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACrC,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC,mBAAmB,EAAE,SAAS,EAAE,EAAE;QAC5D,OAAO,mBAAmB,CAAC,MAAM,CAAC,gCAAkB,CAAC,uCAA+B,CAAC,SAAS,CAAC,EAAC,EAAE,CAAC,CAAC,CAAC;IACvG,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC","sourcesContent":[null]}},"error":null,"hash":"1c7045cb9c7631af79ce058e2eb4015e","cacheData":{"env":{}}}