{"id":"../node_modules/ip-num/IPv6Utils.js","dependencies":[{"name":"/home/user/Desktop/ip tracker/node_modules/ip-num/IPv6Utils.js.map","includedInParent":true,"mtime":1655295187967},{"name":"/home/user/Desktop/ip tracker/package.json","includedInParent":true,"mtime":1655298118967},{"name":"/home/user/Desktop/ip tracker/node_modules/ip-num/package.json","includedInParent":true,"mtime":1655295187959},{"name":"./BinaryUtils","loc":{"line":4,"column":30,"index":171},"parent":"/home/user/Desktop/ip tracker/node_modules/ip-num/IPv6Utils.js","resolved":"/home/user/Desktop/ip tracker/node_modules/ip-num/BinaryUtils.js"},{"name":"./Validator","loc":{"line":5,"column":28,"index":217},"parent":"/home/user/Desktop/ip tracker/node_modules/ip-num/IPv6Utils.js","resolved":"/home/user/Desktop/ip tracker/node_modules/ip-num/Validator.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.collapseIPv6Number = exports.expandIPv6Number = void 0;\nconst BinaryUtils_1 = require(\"./BinaryUtils\");\nconst Validator_1 = require(\"./Validator\");\nlet extractPrefix = (ipv6String) => {\n    return ipv6String.includes(\"/\") ? `/${ipv6String.split(\"/\")[1]}` : \"\";\n};\n/**\n * Expands an IPv6 number in abbreviated format into its full form\n *\n * {@see https://en.wikipedia.org/wiki/IPv6_address#Representation} for more on the representation of IPv6 addresses\n *\n * @param {string} ipv6String the abbreviated IPv6 address to expand\n * @returns {string} the expanded IPv6 address\n */\nexports.expandIPv6Number = (ipv6String) => {\n    let expandWithZero = (hexadecimalArray) => {\n        let paddedArray = hexadecimalArray.map((hexadecimal) => {\n            return BinaryUtils_1.leftPadWithZeroBit(hexadecimal, 4);\n        });\n        return paddedArray.join(\":\");\n    };\n    let expandDoubleColon = (gapCount) => {\n        let pads = [];\n        for (let count = 0; count < gapCount; count++) {\n            pads.push(\"0000\");\n        }\n        return pads.join(\":\");\n    };\n    if (/(:){3,}/.test(ipv6String))\n        throw \"given IPv6 contains consecutive : more than two\";\n    const prefix = extractPrefix(ipv6String);\n    if (ipv6String.includes(\"/\")) {\n        ipv6String = ipv6String.split(\"/\")[0];\n    }\n    let isValid = Validator_1.Validator.IPV6_PATTERN.test(ipv6String);\n    if (!isValid) {\n        throw Error(Validator_1.Validator.invalidIPv6PatternMessage);\n    }\n    if (ipv6String.includes(\"::\")) {\n        let split = ipv6String.split(\"::\");\n        let leftPortion = split[0];\n        let rightPortion = split[1];\n        let leftPortionSplit = leftPortion.split(\":\").filter(hexadecimal => { return hexadecimal !== \"\"; });\n        let rightPortionSplit = rightPortion.split(\":\").filter(hexadecimal => { return hexadecimal !== \"\"; });\n        let doublePortion = expandDoubleColon(8 - (leftPortionSplit.length + rightPortionSplit.length));\n        let leftString = expandWithZero(leftPortionSplit);\n        if (leftString !== \"\") {\n            leftString += \":\";\n        }\n        let rightString = expandWithZero(rightPortionSplit);\n        if (rightString !== \"\") {\n            rightString = \":\" + rightString;\n        }\n        return `${leftString}${doublePortion}${rightString}${prefix}`;\n    }\n    else {\n        return `${expandWithZero(ipv6String.split(\":\"))}${prefix}`;\n    }\n};\n/**\n * Collapses an IPv6 number in full format into its abbreviated form\n *\n * {@see https://en.wikipedia.org/wiki/IPv6_address#Representation} for more on the representation of IPv6 addresses\n *\n * @param {string} ipv6String the full form IPv6 number to collapse\n * @returns {string} the collapsed IPv6 number\n */\nexports.collapseIPv6Number = (ipv6String) => {\n    const prefix = extractPrefix(ipv6String);\n    if (ipv6String.includes(\"/\")) {\n        ipv6String = ipv6String.split(\"/\")[0];\n    }\n    let isValid = Validator_1.Validator.IPV6_PATTERN.test(ipv6String);\n    if (!isValid) {\n        throw Error(Validator_1.Validator.invalidIPv6PatternMessage);\n    }\n    let hexadecimals = ipv6String.split(\":\");\n    let hexadecimalsWithoutLeadingZeros = hexadecimals.map((hexidecimal) => {\n        let withoutLeadingZero = hexidecimal.replace(/^0+/, '');\n        if (withoutLeadingZero !== '') {\n            return withoutLeadingZero;\n        }\n        else {\n            return \"0\";\n        }\n    });\n    let contracted = hexadecimalsWithoutLeadingZeros.join(\":\").replace(/((^0)?(:0){2,}|(^0)(:0){1,})/, ':');\n    if (contracted.slice(-1) === \":\") {\n        return `${contracted}:${prefix}`;\n    }\n    contracted = contracted.replace(\":0:\", \"::\");\n    return `${contracted}${prefix}`;\n};\n"},"sourceMaps":{"js":{"version":3,"file":"IPv6Utils.js","sourceRoot":"","sources":["../../src/IPv6Utils.ts"],"names":[],"mappings":"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","sourcesContent":[null]}},"error":null,"hash":"0ce9aa94fc5605955e7b4e98b120615d","cacheData":{"env":{}}}